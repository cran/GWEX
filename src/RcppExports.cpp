// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrixSubcol
Rcpp::NumericVector matrixSubcol(Rcpp::NumericMatrix x, int i0, int i1, int icol);
RcppExport SEXP _GWEX_matrixSubcol(SEXP xSEXP, SEXP i0SEXP, SEXP i1SEXP, SEXP icolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i0(i0SEXP);
    Rcpp::traits::input_parameter< int >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< int >::type icol(icolSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixSubcol(x, i0, i1, icol));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rprintf
void rcpp_rprintf(NumericVector v);
RcppExport SEXP _GWEX_rcpp_rprintf(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_rprintf(v);
    return R_NilValue;
END_RCPP
}
// all_sug
bool all_sug(LogicalVector x);
RcppExport SEXP _GWEX_all_sug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(all_sug(x));
    return rcpp_result_gen;
END_RCPP
}
// find_row
int find_row(NumericMatrix m, NumericVector v);
RcppExport SEXP _GWEX_find_row(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(find_row(m, v));
    return rcpp_result_gen;
END_RCPP
}
// simPrecipOccurrences
NumericVector simPrecipOccurrences(int nLag, const NumericMatrix& matcomb, NumericMatrix Qtrans, NumericVector rndNorm);
RcppExport SEXP _GWEX_simPrecipOccurrences(SEXP nLagSEXP, SEXP matcombSEXP, SEXP QtransSEXP, SEXP rndNormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nLag(nLagSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matcomb(matcombSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrans(QtransSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rndNorm(rndNormSEXP);
    rcpp_result_gen = Rcpp::wrap(simPrecipOccurrences(nLag, matcomb, Qtrans, rndNorm));
    return rcpp_result_gen;
END_RCPP
}
// simPrecipOccurrences4Fitting
NumericVector simPrecipOccurrences4Fitting(int nLag, int nChainFit, const NumericMatrix& matcomb, NumericVector Qtrans_vec, NumericVector rndNorm);
RcppExport SEXP _GWEX_simPrecipOccurrences4Fitting(SEXP nLagSEXP, SEXP nChainFitSEXP, SEXP matcombSEXP, SEXP Qtrans_vecSEXP, SEXP rndNormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nLag(nLagSEXP);
    Rcpp::traits::input_parameter< int >::type nChainFit(nChainFitSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matcomb(matcombSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Qtrans_vec(Qtrans_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rndNorm(rndNormSEXP);
    rcpp_result_gen = Rcpp::wrap(simPrecipOccurrences4Fitting(nLag, nChainFit, matcomb, Qtrans_vec, rndNorm));
    return rcpp_result_gen;
END_RCPP
}
// pearsonrho
double pearsonrho(NumericVector x, NumericVector y);
RcppExport SEXP _GWEX_pearsonrho(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pearsonrho(x, y));
    return rcpp_result_gen;
END_RCPP
}
// corMarkovChain
double corMarkovChain(NumericMatrix rndNorm, NumericMatrix QtransMat, const NumericMatrix& matcomb, int nChainFit, int nLag);
RcppExport SEXP _GWEX_corMarkovChain(SEXP rndNormSEXP, SEXP QtransMatSEXP, SEXP matcombSEXP, SEXP nChainFitSEXP, SEXP nLagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rndNorm(rndNormSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type QtransMat(QtransMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matcomb(matcombSEXP);
    Rcpp::traits::input_parameter< int >::type nChainFit(nChainFitSEXP);
    Rcpp::traits::input_parameter< int >::type nLag(nLagSEXP);
    rcpp_result_gen = Rcpp::wrap(corMarkovChain(rndNorm, QtransMat, matcomb, nChainFit, nLag));
    return rcpp_result_gen;
END_RCPP
}
// order_
IntegerVector order_(NumericVector x);
RcppExport SEXP _GWEX_order_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_(x));
    return rcpp_result_gen;
END_RCPP
}
// any_sug
bool any_sug(LogicalVector x);
RcppExport SEXP _GWEX_any_sug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_sug(x));
    return rcpp_result_gen;
END_RCPP
}
// getrmsei
NumericVector getrmsei(NumericMatrix Yobs, NumericMatrix Y3obs, IntegerVector mObs, IntegerVector cObs, NumericMatrix Y3sim, IntegerVector mSim, IntegerVector cSim, int nLagScore, int i, NumericMatrix Ysimilag);
RcppExport SEXP _GWEX_getrmsei(SEXP YobsSEXP, SEXP Y3obsSEXP, SEXP mObsSEXP, SEXP cObsSEXP, SEXP Y3simSEXP, SEXP mSimSEXP, SEXP cSimSEXP, SEXP nLagScoreSEXP, SEXP iSEXP, SEXP YsimilagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y3obs(Y3obsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mObs(mObsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cObs(cObsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y3sim(Y3simSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mSim(mSimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cSim(cSimSEXP);
    Rcpp::traits::input_parameter< int >::type nLagScore(nLagScoreSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ysimilag(YsimilagSEXP);
    rcpp_result_gen = Rcpp::wrap(getrmsei(Yobs, Y3obs, mObs, cObs, Y3sim, mSim, cSim, nLagScore, i, Ysimilag));
    return rcpp_result_gen;
END_RCPP
}
// disag3DayGWexPrec
List disag3DayGWexPrec(NumericMatrix Yobs, NumericMatrix Y3obs, IntegerVector mObs, IntegerVector cObs, NumericMatrix Y3sim, IntegerVector mSim, IntegerVector cSim, int nLagScore);
RcppExport SEXP _GWEX_disag3DayGWexPrec(SEXP YobsSEXP, SEXP Y3obsSEXP, SEXP mObsSEXP, SEXP cObsSEXP, SEXP Y3simSEXP, SEXP mSimSEXP, SEXP cSimSEXP, SEXP nLagScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y3obs(Y3obsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mObs(mObsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cObs(cObsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y3sim(Y3simSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mSim(mSimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cSim(cSimSEXP);
    Rcpp::traits::input_parameter< int >::type nLagScore(nLagScoreSEXP);
    rcpp_result_gen = Rcpp::wrap(disag3DayGWexPrec(Yobs, Y3obs, mObs, cObs, Y3sim, mSim, cSim, nLagScore));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GWEX_matrixSubcol", (DL_FUNC) &_GWEX_matrixSubcol, 4},
    {"_GWEX_rcpp_rprintf", (DL_FUNC) &_GWEX_rcpp_rprintf, 1},
    {"_GWEX_all_sug", (DL_FUNC) &_GWEX_all_sug, 1},
    {"_GWEX_find_row", (DL_FUNC) &_GWEX_find_row, 2},
    {"_GWEX_simPrecipOccurrences", (DL_FUNC) &_GWEX_simPrecipOccurrences, 4},
    {"_GWEX_simPrecipOccurrences4Fitting", (DL_FUNC) &_GWEX_simPrecipOccurrences4Fitting, 5},
    {"_GWEX_pearsonrho", (DL_FUNC) &_GWEX_pearsonrho, 2},
    {"_GWEX_corMarkovChain", (DL_FUNC) &_GWEX_corMarkovChain, 5},
    {"_GWEX_order_", (DL_FUNC) &_GWEX_order_, 1},
    {"_GWEX_any_sug", (DL_FUNC) &_GWEX_any_sug, 1},
    {"_GWEX_getrmsei", (DL_FUNC) &_GWEX_getrmsei, 10},
    {"_GWEX_disag3DayGWexPrec", (DL_FUNC) &_GWEX_disag3DayGWexPrec, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_GWEX(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
